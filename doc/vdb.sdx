<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram>
<source><![CDATA[### declare participants ###
/main:External[r]
user:Actorf "User"
/window:MainWindow "GUI"
/director:Director
/mediator:Mediator
/dbMgr:DatabaseManager
/db:Database
/ctx:Context
/widget:Widget
/tree:TreeWidget
/scene:SceneWidget
/ArrangeStrategy:ArrangeStrategy
############################

user:starts application
user:main.new()

main:director.new()

director:director.showSplashScreen()
(2)director[1]:director.initializeRegistry()
director[1]:director.initialize()
director:mediator=mediator.new()

*2 window
This will initialize the map of
<QWidget*, Context*>
*2

(1)mediator[0]:mediator.initializeRegistry()

mediator[1]:dbMgr=dbMgr.new()

*1 director
This will initialize the map of
<Context*, Database*>
*1

(12)dbMgr:dbMgr.initializeRegistry()

*12 mediator
This will initialize the registry of
databases
*12

(3)dbMgr[1]:dbMgr.initializeFactoryRegistry()

*3 mediator
This will initialize the map of
<DriverType, <ObjectType, Factory*>>
*3




director:window.new()
director:window.exec()

director[1]:director.removeSplashScreen()
director[1]:director.enterState(Waiting)

user:window.clicks "New Connection" button
window:director.newConnectionRequest(connInfo)
director:director.enterState(ProcessingRequest)
director:director.showProgressDialog()
director[2]:mediator.newConnectionRequest(connInfo)
mediator:QSqlDatabase*=dbMgr.newConnectionRequest(connInfo)

dbMgr:QSqlDatabase*=dbMgr.createQSqlDatabaseDescriptor()

mediator:ctx=mediator.createContext(connInfo, QSqlDatabase)
mediator[1]:db=dbMgr.newDatabaseRequest(ctx)

[c:alt if factories were not created before]
[c:loop foreach object type]
        dbMgr:factory=dbMgr.createFactory(connInfo->drv, type)
        dbMgr[1]:dbMgr.registerFactory(factory)
[/c]
[/c]

dbMgr[1]:db=db.new()

[c:alt db != NULL]
    dbMgr:dbMgr.register(db)
[/c]





[c:alt db == NULL]
    (5)mediator:emit error("Cannot establish a connection")
    mediator:return
[/c]

*5 dbMgr
  Who should create error
msg dialogs and display them?
*5


mediator:mediator.registrInRegistry(ctx, db)

mediator[1]:tree=tree.new()
mediator:connect(tree, dbObjectInfoRequest, this, dbObjectInfoRequested)

mediator:director.treeWidgetCreated(tree)
director:director.connect(tree,...)
director[1]:director.register(tree,ctx)
director[1]:window.addTree(tree)
(4)window:window.addTab(tree)

*4 user
These calls are for different tab widets
*4

mediator:scene=scene.new()
mediator:connect(scene, dbObjectInfoRequest, this, dbObjectInfoRequested)

mediator:director.sceneWidgetCreated(scene)
director:director.connect(scene,...)
director[1]:director.register(scene,ctx)
director[1]:window.addScene(scene)
(4)window:window.addTab(scene)

mediator:dbMgr.loadData(ctx)
dbMgr:db=dbMgr.findDatabaseByCtx(ctx)
dbMgr[1]:factories=dbMgr.findFactories(db->drv)
dbMgr[1]:result=db.loadData(QMap<Factory*>)

mediator:mediator.dataLoaded(ctx)
mediator[1]:mediator.findWidgetsByCtx(ctx)
[c:loop foreach widget]
    director:emit dataLoaded()
[/c]


director:director.enterState(Waiting)
director:director.hideProgressDialog()

*6 user
    This signal will go straight to mediator
    because we connected it at creation...
    Or maybe it should go through director
    too? Probably yes
*6

(6)window:director.dbObjectInfoRequest(sender)
director:ctx=director.findContextForWidget(sender)
director[1]:info=mediator.dbObjectInfoRequest(ctx)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:info=dbMgr.dbObjectInfoRequest(db)
director:sender->displaydbObjectInfo()

user:window.clicks "Disconnect" button
window:director.disconnectRequest()
director:ctx=director.findContextByWidget(sender)
director:result=mediator.areThereModifiedObjects(ctx)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:result=dbMgr.areThereModifiedObjects(db)
dbMgr:result=db.areThereModifiedObjects()
[c:alt mModifiedObjsVector.isEmpty()]
    db:result=false
    --
    db:result=true
[/c]

[c:alt result == TRUE]
    (9)director:commit=window.showConfirmationDialog()

*9 user
  You have modified objects.
  Do you want to commit these changes?
*9
    [c:alt commit == TRUE]
        director:mediator.commitChanges(ctx)
        mediator:db=mediator.findDatabaseByCtx(ctx)
        mediator[1]:dbMgr.commitChanges(db)
        dbMgr:db.commitChanges()
        [c:loop foreach obj in modified vector]
            db:db.save(obj)
        [/c]
    [/c]
[/c]
director[1]:mediator.disconnect(ctx)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:dbMgr.disconnect(db)
dbMgr:db.resetData()
dbMgr:db.delete()

user:window.clicks "Reload" button
window:director.reloadDataRequest()
director:ctx=director.findContextByWidget(sender)
director[1]:result=mediator.areThereModifiedObjects(ctx)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:result=dbMgr.areThereModifiedObjects(db)
dbMgr:result=db.areThereModifiedObjects()
[c:alt mModifiedObjsVector.isEmpty()]
    db:result=false
    --
    db:result=true
[/c]

[c:alt result == TRUE]
    (11)director:commit=window.showConfirmationDialog()

*11 director
  You have modified objects.
  Do you want to commit these changes?
*11
    [c:alt commit == TRUE]
        director:mediator.commitChanges(ctx)
        mediator:db=mediator.findDatabaseByCtx(ctx)
        mediator[1]:dbMgr.commitChanges(db)
        dbMgr:db.commitChanges()
        [c:loop foreach obj in modified vector]
            db:db.save(obj)
        [/c]
    [/c]
[/c]

director:mediator.reloadDataRequest(ctx)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:dbMgr.reloadData(db)
dbMgr:db.resetData()
dbMgr:db.loadChildren()




user:window.Describe object request
window:director.describeObjectRequest()
director:ctx=director.findContextByWidget(sender)
director[1]:descWidget=mediator.createDescriptionWidget(ctx)
mediator:descWidget=mediator.createDescWidget()
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:objPtr=dbMgr.getDbObjectInfo(db, objName, objType)
dbMgr:objPtr=db.getDbObjectInfo(objName, objType)
db:objPtr=db.findSchema(...).findObject(objName)
director:window.addTab(descWidget)











user:window.adds an item to a scene
window:director.dbObjectItemDisplayRequest(sender, objName)
director:ctx=director.findContextByWidget(sender)
director[1]:mediator.createItem(ctx, objName)
mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:info=dbMgr.dbObjectInfoRequest(db, name)
mediator:item=mediator.createGraphicsItem(info)


*7 window
    After this call the scene will request relations between
    oldItems and recently added item. Note newItem should be
    in oldItems too, so that we can detect self referenced
tables
*7

(7)director:scene.displayItem(item)


director:arrows=mediator.dbObjectRelationsInfoRequest(oldItems, newItem)
[c:loop foreach item in oldItems]
    mediator:relation=dbMgr.detectRelation(item, newItem);
    [c:alt if relation is valid]
        mediator:arrow=mediator.createArrow()
        mediator:mediator.arrows.push_back(arrow);
    [/c]
[/c]

director:scene.drawArrows(arrows)






user:Delete item from scene[PENDING]


user:Query data requests*[PENDING]


user:Save session request[DISCUSSING]
user:window.Save session request
window:director.emit saveSessionRequest()
(14)director:mediator.performChangesCheck()
*14 mediator
    Should we commit all changes? Should we reload
    data? Maybee ask user which action should be done?
*14
director:file=showSaveSessionDialog()
[c:alt if file is OK]
    [c:loop foreach ctx in ctxList]
        director:ctx.new()
        director:ctxData=ctx.data()
        director:director.saveCtx(file, ctxData)
        [c:loop foreach widget in widgetList for ctx]
            director[1]:widget.new()
            director:widgetData=widget.data()
	  director:director.save(file, widgetData)
        [/c]
    [/c]
[/c]


user:Load session request[DISCUSSING]
user:window.Load session request
window:director.emit loadSessionRequest()
director:result=director.showSaveCurrentSessionDialog()
[c:alt if result == YES]
    director[1]:director.performSaveSession()
    *17 director
        Is described above
    *17
[/c]
[c:loop foreach ctx in ctxList]
    director[1]:director.performDisconnect(ctx)
    *15 director
        Is described above
    *15
[/c]
director[1]:file=director.showLoadSessionDialog()
[c:alt if file is OK]
    [c:loop foreach ctx in file]
        director[1]:ctx=director.loadFrom(file)
        director[1]:result=director.performConnecting(ctx)
        *16 director
            Is described above
        *16
        [c:alt if result==OK]
            [c:loop foreach widget in file for ctx]
	      director[1]:widget=director.loadFrom(file)          
                director[1]:director.register(ctx, widget)
                director[1]:window.add(widget)
            [/c]
        [/c]
    [/c]
[/c]


user:Auto load session request at application start[PENDING]
user:Load data by proxy[PENDING]

user:window.activates a tree
window:tree.activate()
tree:director.signalActivated()
director:ctx=director.findCtx(tree);
director[1]:scene=director.findSceneByCtx(ctx)
director[1]:scene.activate()

user:window.activates a scene
window:scene.activate()
scene:director.signalActivated()
director:ctx=director.findCtx(scene);
director[1]:tree=director.findTreeByCtx(ctx)
director[1]:tree.activate()




(8)user:window.double clicks item on scene

*8 user
Or maybe something else but double click?
*8

window:director.itemDoubleClicked()
director:ctx=director.findContextByWidget(sender)
director[1]:tree=director.findTreeByCtx(ctx)
director[1]:tree.findItem(sender->name)



user:Browse active transactions[PENDING]
user:Connection list[PENDING]








user:window.requests context menu somewhere
window:director.contextMenuRequest()
director:ctx=director.findContextByWidget(sender)
(10)director[1]:menu=director.findContextMenu()

*10 user
    how to find out which menu to show????????
    ??????????????
*10
director[1]:window.showContextMenu(menu)




user:window.request items' arranging
window:director.arrangeItems()
director:arrangeStrategy=ArrangeStrategy.new()
director:itemList=scene.items()
director:newItemList=ArrangeStrategy.arrange(itemList)
director:scene.arrange(newItemList)


user:Assigning table relations
user:window.request assigning table relations
window:director.emit Scene::assignRelationsRequest(item1, item2, type)
director:ctx=director.findContextByWidget(scene)
director[1]:arrow=mediator.createRelation(ctx, item1Name, item2Name, type)

mediator:db=mediator.findDatabaseByCtx(ctx)
mediator[1]:result=dbMgr.createRelation(db, item1Name, item2Name, type)
dbMgr:result=db.db->createRelation(item1Name, item2Name, type)
[c:alt if result == OK]
    mediator:arrow=mediator.createArrow(item1Name, item2Name, type)
[/c]
[c:alt if arrow != NULL]
    director:sender->drawArrow(arrow)
[/c]



user:Saving results to file[DISCUSSING]
user:window.Request save results to file
window:director.emit saveResultRequest()
director:file=director.showSelectFileDialog()
[c alt if file is correct]
    director[1]:dataToSave=sender->data()
    director:save(dataToSave)  
[/c]


user:Create database[DISCUSSING]
user:window.Request create database
window:director.emit createDatabaseRequest()
director:params=director.showNewDbParamsDialog()
director[1]:result=mediator.createDatabase(params)
mediator:db=dbMgr.createDatabase(params)
dbMgr:db=db.createDatabase(params)
[c:alt if result == OK]
    director:director.Perform 'New connection' procedure with 'params'
[/c]


user:Drop database[DISCUSSING]
user:window.Request drop database
window:director.emit dropDatabaseRequest()
director:ctx=director.findCtxByWidget(sender)
director[1]:result=mediator.dropDatabase(ctx)
mediator:db=mediator.findDbByCtx(ctx)
mediator[1]:result=dbMgr.dropDatabase(db)


user:Create an object[PENDING]
user:window.Request create an object
window:director.emit createObjectRequest()
director:params=director.showNewObjParamsDialog()
director[1]:ctx=director.findCtxByWidget(sender)
director[1]:newObj=mediator.createNewObj(ctx, params)
mediator:db=mediator.findDbByCtx(ctx)
mediator[1]:newObj=dbMgr.createObject(db, params)
dbMgr:newObj=db.createObject(params)
db:db.registerAsModified(newObj, 'create')
[c:alt if newObj != NULL]
    director:tree=director.findTreeByCtx(ctx)
    director[1]:tree.reload()
[/c]


user:Edit an object[DISCUSSING]
user:window.Request edit object
window:director.emit editObjectRequest(name)
director:ctx=director.findCtxByWidget(sender)
director[1]:params=director.showEditObjectParamsDialog()
(13)director[1]:newObj=mediator.editObject(ctx, name, params)
mediator:db=mediator.findDbByCtx(ctx)
mediator[1]:newObj=dbMgr.editObj(db, name, params)
dbMgr:newObj=db.editObj(obj, params)
db:db.registerAsModified(newObj, 'edit')
*13 director
    Which type a newObj has?
*13
[c:alt if newObj != NULL]
    director:scene=director.findSceneByCtx(ctx)
    director[1]:tree=director.findTreeByctx(ctx)
    director[1]:scene.updateObj(newObj)
    director:tree.updateObj(newObj)
[/c]



user:Save a modified object[DISCUSSING]
user:window.Request save a modified object
window:director.emit saveObjRequest(name)
director:ctx=director.findCtxByWidget(sender)
director[1]:result=mediator.saveObj(ctx, name)
mediator:db=mediator.findDbByCtx(ctx)
mediator[1]:result=dbMgr.saveObj(db, name)
dbMgr:result=db.saveObj(name)
[c:alt if obj with name exists in modified vector]
    db:result=db.save(name)
[/c]
director:director.showResult(result)




user:Drop an object[DISCUSSING]
user:window.Request drop an object
window:director.emit dropObjRequest(name)
director:ctx=director.findCtxByWidget(sender)
director[1]:obj=mediator.dropObj(ctx, name)
mediator:db=mediator.findDbByCtx(ctx)
mediator[1]:obj=dbMgr.dropObj(db, name)
dbMgr:obj=db.dropObj(name)
db:db.registerAsModified(obj, 'drop')
[c:alt if obj != NULL]
    director:scene=director.findSceneByCtx(ctx)
    director[1]:tree=director.findTreeByctx(ctx)
    director[1]:scene.removeObj(name)
    director:tree.removeObj(name)
[/c]


user:Create script[PENDING]
user:Save script[PENDING]
user:Load script[PENDING]
user:Run script[PENDING]]]></source>
<configuration>
<property name="actorWidth" value="25"/>
<property name="allowMessageProperties" value="false"/>
<property name="arrowSize" value="6"/>
<property name="colorizeThreads" value="true"/>
<property name="destructorWidth" value="30"/>
<property family="Dialog" name="font" size="12" style="0"/>
<property name="fragmentMargin" value="8"/>
<property name="fragmentPadding" value="10"/>
<property name="fragmentTextPadding" value="3"/>
<property name="glue" value="10"/>
<property name="headHeight" value="35"/>
<property name="headLabelPadding" value="5"/>
<property name="headWidth" value="100"/>
<property name="initialSpace" value="10"/>
<property name="leftMargin" value="5"/>
<property name="lineWrap" value="false"/>
<property name="lowerMargin" value="5"/>
<property name="mainLifelineWidth" value="8"/>
<property name="messageLabelSpace" value="3"/>
<property name="messagePadding" value="6"/>
<property name="noteMargin" value="6"/>
<property name="notePadding" value="6"/>
<property name="opaqueMessageText" value="false"/>
<property name="returnArrowVisible" value="true"/>
<property name="rightMargin" value="5"/>
<property name="selfMessageHorizontalSpace" value="15"/>
<property name="separatorBottomMargin" value="8"/>
<property name="separatorTopMargin" value="15"/>
<property name="shouldShadowParticipants" value="true"/>
<property name="spaceBeforeActivation" value="2"/>
<property name="spaceBeforeAnswerToSelf" value="10"/>
<property name="spaceBeforeConstruction" value="6"/>
<property name="spaceBeforeSelfMessage" value="7"/>
<property name="subLifelineWidth" value="6"/>
<property name="tc0" value="-1118482"/>
<property name="tc1" value="-256"/>
<property name="tc2" value="-65536"/>
<property name="tc3" value="-16776961"/>
<property name="tc4" value="-16711936"/>
<property name="tc5" value="-4144960"/>
<property name="tc6" value="-65281"/>
<property name="tc7" value="-14336"/>
<property name="tc8" value="-20561"/>
<property name="tc9" value="-12566464"/>
<property name="threadNumbersVisible" value="false"/>
<property name="threaded" value="true"/>
<property name="upperMargin" value="5"/>
<property name="verticallySplit" value="false"/>
</configuration>
</diagram>
